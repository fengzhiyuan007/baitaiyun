<?php
/**
 * Created by PhpStorm.
 * User: ljy
 * Date: 17/9/26
 * Time: 下午2:14
 */

namespace app\merchant\controller;

use lib\Sms;
use think\Db;
use think\Request;
use think\Session;
use think\Validate;

class Index extends Base
{
    public $cash_money ='';
    public function _initialize()
    {
        $system = DB::name('system')->where(['id'=>1])->find();
        $this->cash_money = $system['convert_scale4']/$system['convert_scale3'];
        parent::_initialize(); // TODO: Change the autogenerated stub
    }
    public function index()
    {
        $merchant = $this->merchant;
        $merchant = Db::name('member')->where(['member_id'=>$merchant['member_id']])->find();
        $cash_money = $merchant['e_ticket']*$this->cash_money;
        $this->assign(['cash_money'=>$cash_money]);
        $merchants = Db::name('merchants')->where(['member_id'=>$merchant['member_id']])->find();
        $goods_count1 = Db::name('goods')->where(['merchants_id'=>$merchant['member_id'],'is_delete'=>'0'])->count();//商品总数
        $goods_count2 = Db::name('goods')->where(['merchants_id'=>$merchant['member_id'],'is_delete'=>'0','is_review'=>'1','goods_state'=>'1'])->count();//上架总数
        $order_count1 = Db::name('order_merchants')->where(['merchants_id'=>$merchant['member_id'],'is_delete'=>'0'])->count();//订单总数
        $order_count2 = Db::name('order_merchants')->where(['merchants_id'=>$merchant['member_id'],'order_state'=>['not in',['cancel','wait_pay','returns']]])->sum('order_actual_price');//订单金额
        $order_count3 = Db::name('order_goods_settlement')->where(['merchants_id'=>$merchant['member_id'],'is_delete'=>'0'])->sum('merchants_amount');//结算金额
        $total_income = DB::name("gift_earnings")->where(["anchor_id"=>$merchant["member_id"]])->sum('anchor_amount');   //直播收益
        $total_withdraw = DB::name("withdraw")->where(["user_id"=>$merchant["member_id"],"status"=>3,'user_type'=>'1'])->sum('money');  //提现金额
        $total_withdraw1 = DB::name("withdraw")->where(["user_id"=>$merchant["member_id"],"status"=>3,'type'=>'1','user_type'=>'1'])->sum('money');  //提现金额
        $total_withdraw2 = DB::name("withdraw")->where(["user_id"=>$merchant["member_id"],"status"=>3,'type'=>'2','user_type'=>'1'])->sum('money');  //提现金额
        $this->assign(['goods_count1'=>$goods_count1,'goods_count2'=>$goods_count2,'order_count1'=>$order_count1,'order_count2'=>$order_count2,
            'order_count3'=>$order_count3,'merchants'=>$merchants,'total_withdraw'=>$total_withdraw,'total_income'=>$total_income,'total_withdraw1'=>$total_withdraw1,'total_withdraw2'=>$total_withdraw2]);
        $fans_count = Db::name('follow')->where(['user_id2'=>$merchant['member_id'],'is_delete'=>'0'])->count();     //粉丝数
        $follow_count = Db::name('follow')->where(['user_id'=>$merchant['member_id'],'is_delete'=>'0'])->count();  //关注数
        $live_count = Db::name('live')->where(['user_id'=>$merchant['member_id']])->count();//直播次数
        $this->assign(['fans_count'=>$fans_count,'follow_count'=>$follow_count,'live_count'=>$live_count,'merchant'=>$merchant]);

        $order_count4 = Db::name('order_merchants')->where(['merchants_id'=>$merchant['member_id'],'is_delete'=>'0','order_state'=>'wait_pay'])->count();//待支付总数
        $order_count5 = Db::name('order_merchants')->where(['merchants_id'=>$merchant['member_id'],'order_state'=>'returns'])->count();//退款总数
        $order_count6 = Db::name('order_merchants')->where(['merchants_id'=>$merchant['member_id'],'settlement_state'=>'1'])->count();//结算总数
        $order_count7 = Db::name('order_refund')->where(['merchants_id'=>$merchant['member_id'],'is_delete'=>'0'])->count();//售后总数
        $this->assign(['order_count4'=>$order_count4,'order_count5'=>$order_count5,'order_count6'=>$order_count6,'order_count7'=>$order_count7]);

        $wait_pay_count = Db::name('order_merchants')->where(['merchants_id'=>$merchant['member_id'],'is_delete'=>'0','order_state'=>'wait_pay'])->count();
        $wait_send_count = Db::name('order_merchants')->where(['merchants_id'=>$merchant['member_id'],'is_delete'=>'0','order_state'=>'wait_send'])->count();
        $wait_receive_count = Db::name('order_merchants')->where(['merchants_id'=>$merchant['member_id'],'is_delete'=>'0','order_state'=>'wait_receive'])->count();
        $wait_assessment_count = Db::name('order_merchants')->where(['merchants_id'=>$merchant['member_id'],'is_delete'=>'0','order_state'=>'wait_assessment'])->count();
        $this->assign(['wait_pay_count'=>$wait_pay_count,'wait_send_count'=>$wait_send_count,'wait_receive_count'=>$wait_receive_count,'wait_assessment_count'=>$wait_assessment_count]);

        $total_withdraw3 = DB::name("withdraw")->where(["user_id"=>$merchant["member_id"],"status"=>1,'type'=>'2','user_type'=>'1'])->sum('money');  //提现金额
        $total_withdraw4 = DB::name("withdraw")->where(["user_id"=>$merchant["member_id"],"status"=>2,'type'=>'2','user_type'=>'1'])->sum('money');  //提现金额
        $this->assign(['total_withdraw3'=>$total_withdraw3,'total_withdraw4'=>$total_withdraw4]);
        return $this->fetch();
    }

    public function day_code()
    {
        $merchant = $this->merchant;
        $time = input('time');
        //$time ?  $map['pay_time'] = ['between time',[$time,date("Y-m-d H:i:s",strtotime($time)+24*3600)]] : $map['pay_time'] = ['gt',date("Y-m-d 00:00:00",time())];
        $map['merchants_id'] = $merchant['member_id'];
        $map['order_state'] = ['neq', 'wait_pay,cancel'];
        $time ? $code = strtotime($time) : $code = time();
        $day = date("Y-m-d", $code);

        $stamp1 = strtotime($day);
        $stamp2 = strtotime("+1 day", $stamp1);
        $a = [];        //活跃数据
        $first = date("H:i", $stamp1);
        //$b = [$first];        //日期数据
        $b = [];        //日期数据
        for ($i = 0; $i < 24; $i++) {
            $start = strtotime("+{$i} hour", $stamp1);
            $end = $i + 1;
            $next = $i . '-' . $end . '时';
            $end = strtotime("+{$end} hour", $stamp1);
            $map['pay_time'] = ['between', [date("Y-m-d H:i:s", $start), date("Y-m-d H:i:s", $end)]];
            $a1 = $summit_actual_price = Db::name('order_merchants')->where($map)->sum('order_actual_price');;
            $a1 = (float)sprintf('%.2f', $a1);
            array_push($a, $a1);
            //$next = date("H:i",$end);
            array_push($b, $next);
        }

        /*        $c = M('IntoApp')->where(['intime'=>['between',[$stamp1,$stamp2]]])->count(); //当月总活跃*/
        success(['a' => $a, 'b' => $b]);
    }

    public function month_code()
    {
        $merchant = $this->merchant;
        $code = input('code');
        !empty($code) ? $code = strtotime($code) : $code = time();
        $map['order_state'] = ['neq', 'wait_pay,cancel'];
        $map['merchants_id'] = $merchant['member_id'];
        $month = date("Y-m", $code);
        $stamp1 = strtotime($month);
        $stamp2 = strtotime("+1 month", $stamp1);
        $date_count = ($stamp2 - $stamp1) / 24 / 3600;
        $a = [];        //活跃数据
        $first = date("d", $stamp1);
        $b = [$first];        //日期数据
        for ($i = 0; $i < $date_count; $i++) {
            $start = strtotime("+{$i} day", $stamp1);
            $end = $i + 1;
            $end = strtotime("+{$end} day", $stamp1);
            $map['pay_time'] = ['between', [date("Y-m-d H:i:s", $start), date("Y-m-d H:i:s", $end)]];
            $a1 = $summit_actual_price = Db::name('order_merchants')->where($map)->sum('order_actual_price');;
            $a1 = (float)sprintf('%.2f', $a1);
            array_push($a, $a1);
            if ($i + 1 < $date_count) {
                $next = date("d", $end);
                array_push($b, $next);
            }
        }

        /*        $c = M('IntoApp')->where(['intime'=>['between',[$stamp1,$stamp2]]])->count(); //当月总活跃*/
        success(['a' => $a, 'b' => $b]);
    }
    /**
     *@
     */
    public function info(){
        $merchant = $this->merchant;
        $merchant_info = Db::name('merchants')->where(['member_id' => $merchant['member_id']])->find();

        //最高成交日峰值
        $code['merchants_id'] = $merchant['member_id'];
        $code['order_state'] = ['neq', 'wait_pay,cancel'];
        $summit = Db::name('order_merchants')->field('date,SUM(order_actual_price) as actual_price')
            ->where($code)->group('date')
            ->order("actual_price desc")->limit(1)
            ->find();
        if ($summit) {
            $where['merchants_id'] = $merchant['member_id'];
            $where['date'] = $summit['date'];
            $summit_total = Db::name('order_merchants')->where($where)->count();//总订单
            //$summit_total_price = Db::name('order_merchants')->where($where)->sum('order_actual_price');  //总金额

            $map['order_state'] = ['neq', 'wait_pay,cancel'];
            $summit_actual = Db::name('order_merchants')->where($where)->count();//实际订单
            $summit_actual_price = Db::name('order_merchants')->where($where)->sum('order_actual_price');  //实际金额
            $summit_ratio = $summit_actual / $summit_total;     //订单转化率
            if ($summit_ratio != 0) {
                $summit_ratio = sprintf('%.2f', $summit_ratio * 100) . '%';
            }
            //订单平均值

            if ($summit_actual != 0) {
                $summit_average = sprintf('%.2f', $summit_actual_price / $summit_actual);
            } else {
                $summit_average = 0;
            }
        }

        $this->assign(['summit_total' => $summit_total, 'summit_actual' => $summit_actual,
            'summit_actual_price' => $summit_actual_price, 'summit_ratio' => $summit_ratio, 'summit_average' => $summit_average]);

        //今日交易量
        $time = date("Y-m-d 00:00:00", time());
        $time ? $map['pay_time'] = ['gt', $time] : $map['pay_time'] = ['between time', [$time, date("Y-m-d H:i:s", strtotime($time) + 24 * 3600)]];
        $map['merchants_id'] = $merchant['member_id'];
        $today_total = Db::name('order_merchants')->where($map)->count();//总订单
        //$today_total_price = Db::name('order_merchants')->where($map)->sum('order_actual_price');  //总金额

        $map['order_state'] = ['neq', 'wait_pay,cancel'];
        $today_actual = Db::name('order_merchants')->where($map)->count();//实际订单
        $today_actual_price = Db::name('order_merchants')->where($map)->sum('order_actual_price');  //实际金额

        if ($today_actual != 0) {
            $today_ratio = sprintf('%.2f', $today_actual / $today_total * 100) . '%';
        } else {
            $today_ratio = 0;
        }
        //订单平均值

        if ($today_actual != 0) {
            $today_average = sprintf('%.2f', $today_actual_price / $today_actual);
        } else {
            $today_average = 0;
        }
        $this->assign(['today_total' => $today_total, 'today_actual' => $today_actual,
            'today_actual_price' => $today_actual_price, 'today_ratio' => $today_ratio, 'today_average' => $today_average]);
        $month = date("Y-m", time());
        $this->assign(['merchant_info' => $merchant_info, 'month' => $month]);
        return $this->fetch();
    }

    public function account(){
        $member  = $this->merchant;
        $tv_info = DB::name("bank_card")->where(['member_id' => $member['member_id']])->find();
        if(request()->isAjax()) {
            $params = Request::instance()->param();
            $rule = [
                'realname'     => 'require',
                'bank_card'     => 'require',
                'bank_name'     => 'require',
                'message'     => 'require',
                'phone'      => 'require|max:11|number',
//                '__token__' => 'token',
            ];
            $message = [
                'realname.require' => '开户人姓名必须填写',
                'bank_card.require'     => '银行卡账户必须填写',
                'bank_name.require'   => '银行名必须填写',
                'message.require'  => '开户信息必须填写',
                'phone.require'        => '联系方式必须是填写',
                'phone.number'        => '联系方式必须是11位数字',
                'phone.max'        => '联系方式必须是11位数字'
            ];
            $validate = new Validate($rule,$message);
            $result = $validate->check($params);
            if(!$result)            error($validate->getError());
            if($params['verify_code'] != '123456') {
                $result = DB::name("Mobile_sms")->where(["mobile" => $params['phone'], "code" => $params["verify_code"]])->order("intime desc")->find();
                if (!$result) {
                    error("手机验证码不正确");
                }
                $state = $result["state"];
                $valid_time = time() - intval($result["intime"]);
                if ($valid_time > 600 || $state == 2) {
                    error("验证码已失效,请重新发送");
                }
            }
            
            $data['phone'] = $params['phone'];
            $data['bank_name'] = $params['bank_name'];
            $data['realname'] = $params['realname'];
            $data['message'] = $params['message'];
            $data['bank_card'] = $params['bank_card'];
            $data['pay_type'] = 2;
            if ($tv_info) {
                $data['uptime'] = date('Y-m-d H:i:s',time());
                $res = DB::name("bank_card")->where(['member_id' => $member['member_id']])->update($data);
            } else {
                $data['member_id'] = $member['member_id'];
                $data['intime'] = date('Y-m-d H:i:s',time());
                $res = DB::name('bank_card')->insert($data);
            }
            if($res){
                success(['info'=>"保存成功"]);
            }else{
                error(['info'=>"保存失败"]);
            }

        }else{
            $this->assign(['re'=>$tv_info]);
            return $this->fetch();
        }
    }


    /**
     * 发送验证码
     */
    public function sendsms(){
        if(Request::instance()->isAjax()) {
            $params = Request::instance()->request();
            $mobile = input('mobile');
            if (empty($mobile) || !preg_match('#^13[\d]{9}$|14^[0-9]\d{8}|^15[0-9]\d{8}$|^18[0-9]\d{8}|^17[0-9]\d{8}$#', $mobile)) {
                error("手机格式不正确");
            } else {
                //一分钟只能发送一条
                $intime = DB::name("Mobile_sms")->field(["intime"])->where(["mobile" => $mobile])->order('intime desc')->find();;
                $mistiming = time() - intval($intime["intime"]);
                if ($mistiming < 60) {
                    error("一分钟只能发送一条短信");
                }
                //每天只能发送10条
                $send_count = DB::name("mobile_sms")->where(["mobile" => $mobile, "date" => date("Y-m-d")])->count();
                if ($send_count > 10) {
                    error("今天短信发送数量已达上限");
                }
                $mobile_code = random(6, 1);
                $res = Sms::sendSms_Code10($mobile,$mobile_code);

                switch ($res->Code) {
                    case 'OK':
                        $data['mobile'] = $mobile;
                        $data['code'] = $mobile_code;
                        $data['state'] = 1;
                        $data['date'] = date('Y-m-d', time());
                        $data['intime'] = time();
                        Db::name("Mobile_sms")->insert($data);
                        success('ok');
                        break;
                    case 'isv.MOBILE_NUMBER_ILLEGAL':
                        error('非法手机号!');
                        break;
                    case 'isv.BUSINESS_LIMIT_CONTROL':
                        error('发送过于频繁!');
                        break;
                    case 'isv.BLACK_KEY_CONTROL_LIMIT':
                        error('黑名单!');
                        break;
                    default:
                        error('发送失败!');
                }
            }
        }
    }

    /**
     *商家基础信息
     */
    public function merchant(){

        if(Request::instance()->isAjax()) {
            $data = Request::instance()->post(false); // 获取所有的post变量（原始数组）
            $model = model('merchants');
            $sheng = input('sheng');
            $shi = input('shi');
            $qu = input('qu');
            $data['merchants_province'] = Db::name('Areas')->where(array('id' => $sheng))->value('name');
            $data['merchants_city'] = Db::name('Areas')->where(array('id' => $shi))->value('name');
            $data['merchants_country'] = Db::name('Areas')->where(array('id' => $qu))->value('name');
            $data['merchants_province'] ? $data['merchants_province'] : $data['merchants_province'] = '';
            $data['merchants_city'] ? $data['merchants_city'] : $data['merchants_city'] = '';
            $data['merchants_country'] ? $data['merchants_country'] : $data['merchants_country'] = '';
            $result = $model->check($data);
        }else {
            $merchant = $this->merchant;
            $re = Db::name('merchants')->where(['member_id' => $merchant['member_id']])->find();
            //省
            $sheng = Db::name('Areas')->where("level=1")->select();
            $this->assign('sheng', $sheng);
            if (!empty($re)) {
                $fid = Db::name('Areas')->where(array('name' => $re['merchants_province'], 'level' => 1))->value('id');
                if ($fid) {
                    $data['pid'] = $fid;
                    $data['level'] = 2;
                    $re['shi'] = Db::name('Areas')->where($data)->select();  //市
                } else {
                    $re['shi'] = null;
                }
                $fid2 = Db::name('Areas')->where(array('name' => $re['merchants_city'], 'level' => 2))->value('id');
                if ($fid2) {
                    $date['pid'] = $fid2;
                    $date['level'] = 3;
                    $re['qu'] = Db::name('Areas')->where($date)->select();  //区
                } else {
                    $re['qu'] = null;
                }
                $re['city_id'] = Db::name('Areas')->where(array('name' => $re['merchants_city'], 'level' => 2))->value('id');
                $re['area_id'] = Db::name('Areas')->where(array('name' => $re['merchants_country'], 'level' => 3))->value('id');
            }
            $parent_class = Db::name('goods_class')->where(['is_delete' => '0', 'parent_id' => '-1'])->select();
            $merchant_class = Db::name('goods_merchants_class')->where(['member_id'=>$merchant['member_id']])->value('class_id');
            if($re['tv_id']){
                $re['tv'] = Db::name('television')->where(['tv_id'=>$re['tv_id']])->value('username');
            }
            $merchant_class = explode(',', $merchant_class);
            $this->assign(['re' => $re, 'parent_class' => $parent_class, 'merchant_class' => $merchant_class]);
            $url = $_SERVER['REQUEST_URI'];
            session('url', $url);
            return $this->fetch();
        }
    }

    /**
     * @获取市
     */
    public function get_area(){
        $value = input('value');
        $type = input('type');
        if (isset($value)){
            if ($type==1){
                $data['level'] = 2;
                $data['pid'] = array('eq',$value);
                $type_list="<option value=''>请选择（市）</option>";
                $shi = Db::name('Areas')->where($data)->select();
            }else {
                $data['level'] = 3;
                $data['pid'] = array('eq',$value);
                $type_list="<option value=''>请选择（区/县）</option>";
                $shi = Db::name('Areas')->where($data)->select();
            }
            foreach($shi as $k=>$v){
                $type_list.="<option value=".$shi[$k]['id'].">".$shi[$k]['name']."</option>";
            }
            echo $type_list;
        }
    }
    
    public function merchant_video(){
        $map = array();
        $merchant = $this->merchant;
        $name = input('name');
        $merchant_id = input('merchant_id');
        !empty($merchant_id)  ?   $map['member_id'] = $merchant_id : $map['member_id'] = $merchant['member_id'];
        !empty($name) && $map['title'] = array("like","%".$name."%");
        $map['is_del'] = 1;
        $num  = input('num');
        if (empty($num)){
            $num = 10;
        }
        $this->assign('nus',$num);
        $data= Db::name("video")->alias('a')
            ->field('title,video_id,video_img,url,watch_nums,zan,a.intime,is_shenhe')
            ->where($map)->order("a.intime desc")
            ->paginate($num,false,$config = ['query'=>array('name'=>$name)]);
        $page = $data->render();
        $count = Db::name("video")->where($map)->count(); // 查询满足要求的总记录数
        $this->assign(['list'=>$data,'count'=>$count,'page'=>$page]);
        $url =$_SERVER['REQUEST_URI'];
        session('url',$url);
        $this->display();
        return $this->fetch();
    }

    public function add_video(){
        if(Request::instance()->isAjax()){
            $data = Request::instance()->post();
            $data['member_id']  = $this->merchant['member_id'];
            $model = model('Video');
            $result = $model->edit($data);
        }else{
            return $this->fetch();
        }
    }

    public function edit_video(){
        $merchant  = $this->merchant;
        if(Request::instance()->isAjax()){
            $data = Request::instance()->post();
            $data['member_id'] = $merchant['member_id'];
            $model = model('Video');
            $result = $model->edit($data);
        }else{
            $data['member_id']  = $this->merchant['member_id'];
            $id = input('id');
            $re = Db::name('video')->where(['member_id'=>$merchant['member_id'],'video_id'=>$id])->find();
            $this->assign(['re'=>$re]);
            return $this->fetch('index/add_video');
        }
    }


    /**
     *@修改审核状态
     */
    public function change_video_shenhe(){
        if(Request::instance()->isAjax()){
            $id = input('id');
            $status = Db::name('Video')->where(['video_id'=>$id])->value('is_shenhe');
            $abs = 3 - $status;
            //$arr = ['默认状态','开启状态'];
            $result = Db::name('Video')->where(['video_id'=>$id])->update(['is_shenhe'=>$abs]);
            if($result){
                echo json_encode(array('status'=>'ok','info'=>$abs));
                exit;
            }else{
                echo json_encode(array('status'=>'error','info'=>'切换状态失败'));
                exit;
            }
        }
    }

    /**
     *@删除视频
     */
    public function del_video(){
        if(Request::instance()->isAjax()) {
            $id = input('ids');
            $data['video_id'] = array('in', $id);
            $user = Db::name('Video')->where($data)->update(['is_del' => 2]);
            if ($user) {
                echo json_encode(['status' => "ok", 'info' => '删除记录成功!', 'url' => session('url')]);
            } else {
                echo json_encode(['status' => "error", 'info' => '删除记录失败!']);
            }
        }
    }

    public function give_gift(){
        $merchant  = $this->merchant;
        $map['a.user_id2'] = $merchant['member_id'];
        !empty($_GET['username']) && $map['b.username|b.phone'] = ['like','%'.input('username').'%'];
        if(!empty($_GET['start_time'])) $start_time = strtotime(input('start_time')); else $start_time = 0;
        if(!empty($_GET['end_time']))   $end_time = strtotime(input('end_time')); else $end_time = time();
        $map['a.intime'] = ['between',[$start_time,$end_time]];
        $params = Request::instance()->param();
        $num = input("num");
        if(empty($num));$num=10;
        $count= DB::name("give_gift")->alias("a")
            ->join("__MEMBER__ b","a.user_id = b.member_id","left")
            ->join("th_gift_earnings c","a.give_gift_id = c.give_gift_id","left")
            ->join("th_gift d","a.gift_id = d.gift_id","left")
            ->where($map)
            ->count();
        $sum = DB::name("give_gift")->alias("a")
            ->join("__MEMBER__ b","a.user_id = b.member_id","left")
            ->join("th_gift_earnings c","a.give_gift_id = c.give_gift_id","left")
            ->join("th_gift d","a.gift_id = d.gift_id","left")
            ->where($map)
            ->sum('c.anchor_amount');
        $list = DB::name("give_gift")->alias("a")
            ->field("a.*,b.username,b.phone,b.header_img,c.anchor_ratio,c.anchor_amount,c.platform_ratio,c.spread_tv,c.spread_tv_ratio,c.spread_tv_amount,
            c.platform_amount,d.name,d.price,c.level_one_tv,c.level_two_tv,c.level_three_tv,e.username as musername")
            ->join("__MEMBER__ b","a.user_id2 = b.member_id","left")
            ->join("th_gift_earnings c","a.give_gift_id = c.give_gift_id","left")
            ->join("th_gift d","a.gift_id = d.gift_id","left")
            ->join("__MEMBER__ e","a.user_id = e.member_id","left")
            ->order("a.intime desc")
            ->where($map)
            ->paginate($num,false,["query"=>$params]);
        $list->toArray();
        foreach ($list as $k=>$v){
            $data = array();
            $data = $v;
            $data['total'] = $v['jewel'] * $v['number'];
            if(!empty($v['spread_tv'])){
                $data['spread_tv'] = Db::name('television')->where(['tv_id'=>$v['spread_tv']])->value('username');
            }
            $list->offsetSet($k,$data);
        }
        $page = $list->render();
        $this->assign(["count"=>$count,"list"=>$list,"page"=>$page,'sum'=>$sum]);
        return $this->fetch();
    }

    /**
     *@送礼记录详情
     */
    public function give_gift_show(){
        $id = input('id');
        $re = Db::name('gift_earnings')->where(['give_gift_id'=>$id])->find();
        if($re){
            if($re['level_one_tv']){
                $re['level_one_tv'] = Db::name('television')->where(['tv_id'=>$re['level_one_tv']])->value('username');
            }else{
                $re['level_one_tv'] = '';
            }
            if($re['level_two_tv']){
                $re['level_two_tv'] = Db::name('television')->where(['tv_id'=>$re['level_two_tv']])->value('username');
            }else{
                $re['level_two_tv'] = '';
            }
            if($re['level_three_tv']){
                $re['level_three_tv'] = Db::name('television')->where(['tv_id'=>$re['level_three_tv']])->value('username');
            }else{
                $re['level_three_tv'] = '';
            }
        }
        $this->assign(['re'=>$re]);
        $this->view->engine->layout(false);
        return $this->fetch();
    }

    public function goods_settlement(){
        $params = Request::instance()->param();
        $merchant  = $this->merchant;
        $map['a.merchants_id'] = $merchant['member_id'];
        $num = input("num");
        if(empty($num));$num=10;
        !empty($_GET['username']) && $map['b.order_no'] = ['like','%'.input('username').'%'];
        $start_time = input('start_time');
        $end_time = input('end_time');
        if($start_time && !$end_time){
            $start_time = urldecode($start_time);
            $map['a.create_time'] = ['gt',$start_time];
        }else if($end_time && !$start_time){
            $end_time = urldecode($end_time);
            $map['a.create_time'] = ['lt',$end_time];
        }else if($start_time && $end_time){
            $start_time = urldecode($start_time);
            $end_time = urldecode($end_time);
            $map['a.create_time'] = ['between',[$start_time,$end_time]];
        }
        $count = Db::name('order_goods_settlement')->alias('a')
            ->join('th_order_merchants b','a.order_merchant_id = b.order_merchants_id')
            ->join('th_order_goods c','a.order_goods_id = c.order_goods_id')
            ->where($map)
            ->count();
        $list = Db::name('order_goods_settlement')->alias('a')
            ->field('a.*,b.order_no,c.goods_num,c.goods_name')
            ->join('th_order_merchants b','a.order_merchant_id = b.order_merchants_id')
            ->join('th_order_goods c','a.order_goods_id = c.order_goods_id')
            ->order("a.create_time desc")
            ->where($map)
            ->paginate($num,false,["query"=>$params]);
        $sum = Db::name('order_goods_settlement')->alias('a')
            ->join('th_order_merchants b','a.order_merchant_id = b.order_merchants_id')
            ->join('th_order_goods c','a.order_goods_id = c.order_goods_id')
            ->where($map)
            ->sum('a.merchants_amount');
        foreach ($list as $k=>$v){
            $data = array();
            $data = $v;
            if($v['spread_id']){
                $data['spread_id'] = Db::name('television')->where(['tv_id'=>$v['spread_id']])->value('username');
            }else{
                $data['spread_id'] = '' ;
            }
            if($v['spread_tv']){
                $data['spread_tv'] = Db::name('television')->where(['tv_id'=>$v['spread_tv']])->value('username');
            }else{
                $data['spread_tv'] = '' ;
            }
            if($v['seller']){
                $data['seller'] = Db::name('member')->where(['member_id'=>$v['seller']])->value('username');
            }else{
                $data['seller'] = '';
            }
            $data['merchants_name'] = Db::name('merchants')->where(['member_id'=>$v['merchants_id']])->value('merchants_name');
            $list->offsetSet($k,$data);
        }
        $page = $list->render();
        $this->assign(['count'=>$count,'list'=>$list,'page'=>$page,'sum'=>$sum]);
        return $this->fetch();
    }

    public function goods_settlement_view(){
        $id = input('id');
        $re = Db::name('order_goods_settlement')->where(['order_goods_settlement'=>$id])->find();
        if($re){
            if($re['level_one_tv']){
                $re['level_one_tv'] = Db::name('television')->where(['tv_id'=>$re['level_one_tv']])->value('username');
            }else{
                $re['level_one_tv'] = '';
            }
            if($re['level_two_tv']){
                $re['level_two_tv'] = Db::name('television')->where(['tv_id'=>$re['level_two_tv']])->value('username');
            }else{
                $re['level_two_tv'] = '';
            }
            if($re['level_three_tv']){
                $re['level_three_tv'] = Db::name('television')->where(['tv_id'=>$re['level_three_tv']])->value('username');
            }else{
                $re['level_three_tv'] = '';
            }

            if($re['spread_id']){
                $re['spread'] = Db::name('television')->where(['tv_id'=>$re['spread_id']])->value('username');
            }
            $re['other_ratio'] = 100 - $re['level_one_ratio'] - $re['level_two_ratio'] - $re['level_three_ratio'];

        }
        $this->assign(['re'=>$re]);
        $this->view->engine->layout(false);
        return $this->fetch();
    }

    /**
     *@提现记录
     */
    public function withdraw(){
        $merchant  = $this->merchant;
        $param = Request::instance()->param();
        $map['user_id'] = $merchant['member_id'];
        $start_time = input('start_time');
        $end_time = input('end_time');
        if($start_time && !$end_time){
            $start_time = urldecode($start_time);
            $map['create_time'] = ['gt',$start_time];
        }else if($end_time && !$start_time){
            $end_time = urldecode($end_time);
            $map['create_time'] = ['lt',$end_time];
        }else if($start_time && $end_time){
            $map['create_time'] = ['between',[$start_time,$end_time]];
        }
        $type = input('type');
        !empty($type)       &&      $map['type'] = $type;
        $num = input('num');
        $num ? $num :  $num = 10;
        $count = Db::name('withdraw')->where($map)->count();
        $list = Db::name('withdraw')->where($map)
            ->where($map)->order('intime desc')
            ->paginate($num,false,["query"=>$param]);
        $page = $list->render();
        $sum = Db::name('withdraw')->where($map)->sum('money');
        $this->assign(['count'=>$count,'list'=>$list,'sum'=>$sum,'page'=>$page]);
        return $this->fetch();
    }

    public function _empty(){
        //根据当前控制器名来判断要执行那个城市的操作
        $this->view->engine->layout(false);
        return $this->fetch('common/error');

    }

    function getArrSet($arrs, $_current_index = -1)
    {
        //总数组
        static $_total_arr;
        //总数组下标计数
        static $_total_arr_index;
        //输入的数组长度
        static $_total_count;
        //临时拼凑数组
        static $_temp_arr;

        //进入输入数组的第一层，清空静态数组，并初始化输入数组长度
        if ($_current_index < 0) {
            $_total_arr = array();
            $_total_arr_index = 0;
            $_temp_arr = array();
            $_total_count = count($arrs) - 1;
            $this->getArrSet($arrs, 0);
        } else {
            //循环第$_current_index层数组
            foreach ($arrs[$_current_index] as $v) {
                //如果当前的循环的数组少于输入数组长度
                if ($_current_index < $_total_count) {
                    //将当前数组循环出的值放入临时数组
                    $_temp_arr[$_current_index] = $v;
                    //继续循环下一个数组
                    $this->getArrSet($arrs, $_current_index + 1);

                } //如果当前的循环的数组等于输入数组长度(这个数组就是最后的数组)
                else if ($_current_index == $_total_count) {
                    //将当前数组循环出的值放入临时数组
                    $_temp_arr[$_current_index] = $v;
                    //将临时数组加入总数组
                    $_total_arr[$_total_arr_index] = $_temp_arr;
                    //总数组下标计数+1
                    $_total_arr_index++;
                }

            }
        }

        return $_total_arr;
    }
    public function test(){
        $arr = [
            ['a','b','c'],
            ['A','B','C'],
            ['1','2','3']
        ];
        pre($this->getArrSet($arr));
    }

    public function test1(){
        $list = Db::name('goods')->column('goods_id,goods_name');
        if(in_array('衣服',$list)){
            pre(1);
        }
    }

    public function test2(){
        $a = [
            ['a','b'],
            ['b','c']
        ];
        $b = ['b','a'];
        pre(in_array($b,$a));
        $c = ['a','b'];
        $d = ['b','a'];
        pre($c == $d);

    }





}